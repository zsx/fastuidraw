vec4
fastuidraw_gl_frag_main(in uint sub_shader,
                        in uint shader_data_offset)
{
  float alpha = 1.0, red = 1.0;
  uint render_pass, dash_style;

  #ifndef FASTUIDRAW_STROKE_ONLY_SUPPORT_NON_AA
    {
      render_pass = FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_sub_shader_render_pass_bit0,
                                            fastuidraw_stroke_sub_shader_render_pass_num_bits,
                                            sub_shader);
    }
  #else
    {
      render_pass = uint(fastuidraw_stroke_non_aa);
    }
  #endif

  #ifdef FASTUIDRAW_STROKE_COVER_THEN_DRAW
    {
      if (render_pass == uint(fastuidraw_stroke_aa_pass2))
        {
          return vec4(1.0, 1.0, 1.0, fastuidraw_clear_auxiliary());
        }
    }
  #endif

  /* NOTE: COVER_THEN_DRAW shader does NOT work in dashed stroking
     for non-anti-aliased shading because it does not allow discard
  */
  #ifdef FASTUIDRAW_STROKE_DASHED
    {
      if ((fastuidraw_stroking_dash_bits & uint(fastuidraw_stroke_gauranteed_to_be_covered_mask)) == 0u)
        {
          uint dash_style;
          float fwidth_fastuidraw_stroking_distance = fwidth(fastuidraw_stroking_distance);
          float fwidth_fastuidraw_stroking_on_boundary = fwidth(fastuidraw_stroking_on_boundary);

          dash_style = FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_sub_shader_dash_style_bit0,
                                               fastuidraw_stroke_sub_shader_dash_style_num_bits,
                                               sub_shader);

          if ((fastuidraw_stroking_dash_bits & uint(fastuidraw_stroke_gauranteed_to_be_covered_mask)) != 0u)
            {
              alpha = 1.0;
            }
          else
            {
              alpha = fastuidraw_stroke_compute_dash_coverage(dash_style, shader_data_offset,
                                                              fastuidraw_stroking_distance,
                                                              fastuidraw_stroking_distance_sub_edge_start,
                                                              fastuidraw_stroking_distance_sub_edge_end,
                                                              fwidth_fastuidraw_stroking_distance,
                                                              fastuidraw_stroking_on_boundary,
                                                              fwidth_fastuidraw_stroking_on_boundary,
                                                              (fastuidraw_stroking_dash_bits & uint(fastuidraw_stroke_skip_dash_interval_lookup_mask)) != 0u);
            }

          #if !defined(FASTUIDRAW_STROKE_COVER_THEN_DRAW)
            {
              if (render_pass == uint(fastuidraw_stroke_aa_pass1) && alpha < 1.0 - 1.0 / 255.0)
                {
                  alpha = 0.0;
                }
            }
          #endif
        }
    }
  #endif

  #ifdef FASTUIDRAW_STROKE_COVER_THEN_DRAW
    {
      if (render_pass == uint(fastuidraw_stroke_aa_pass1))
        {
          float dd, q;

          // modulate by coverage to boundary
          q = 1.0 - fastuidraw_stroking_on_boundary;
          dd = max(q, fwidth(q));
          alpha *= q / dd;
          fastuidraw_max_auxiliary(alpha);
          alpha = 0.0;
        }
    }
  #elif defined(FASTUIDRAW_STROKE_DASHED)
    {
      float dd, q;

      // modulate by coverage to boundary
      q = 1.0 - fastuidraw_stroking_on_boundary;
      dd = max(q, fwidth(q));
      alpha *= q / dd;

      if (render_pass != uint(fastuidraw_stroke_aa_pass2) && alpha < 1.0 - 1.0 / 255.0)
        {
          FASTUIDRAW_DISCARD;
        }
    }
  #else
    {
      if (render_pass == uint(fastuidraw_stroke_aa_pass2))
        {
          float dd, q;

          // modulate by coverage to boundary
          q = 1.0 - fastuidraw_stroking_on_boundary;
          dd = max(q, fwidth(q));
          alpha *= q / dd;
        }
      else
        {
          alpha = 1.0;
        }
    }
  #endif

  return vec4(1.0, 1.0, 1.0, alpha);
}
