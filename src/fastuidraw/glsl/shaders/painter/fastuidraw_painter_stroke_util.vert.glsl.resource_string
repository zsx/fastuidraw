void
fastuidraw_stroke_compute_offset_default(in uint point_packed_data,
                                         in int offset_type,
                                         in vec2 position,
                                         in vec2 pre_offset,
                                         in vec2 auxiliary_offset,
                                         in float miter_limit,
                                         out vec2 offset)
{
  offset = pre_offset;
}

void
fastuidraw_stroke_compute_offset_miter_clip(in uint point_packed_data,
                                            in int offset_type,
                                            in vec2 position,
                                            in vec2 pre_offset,
                                            in vec2 auxiliary_offset,
                                            in float miter_limit,
                                            out vec2 offset)
{
  vec2 n0 = pre_offset, Jn0 = vec2(n0.y, -n0.x);
  vec2 n1 = auxiliary_offset, Jn1 = vec2(n1.y, -n1.x);
  float r, det, lambda;

  det = dot(Jn1, n0);
  lambda = -sign(det);
  r = (det != 0.0) ? (dot(n0, n1) - 1.0) / det : 0.0;

  if ((uint(fastuidraw_stroke_lambda_negaged_mask) & point_packed_data) != 0u)
    {
      lambda = -lambda;
    }

  /* enforce miter-limit */
  if (miter_limit >= 0.0)
    {
      float mm;

      mm = miter_limit * abs(r) / sqrt(1.0 + r * r);
      r = clamp(r, -mm, mm);
    }
  offset = lambda * (n0 + r * Jn0);
}

void
fastuidraw_stroke_compute_offset_miter(in uint point_packed_data,
                                       in int offset_type,
                                       in vec2 position,
                                       in vec2 pre_offset,
                                       in vec2 auxiliary_offset,
                                       in float miter_limit,
                                       out vec2 offset)
{
  vec2 n0 = pre_offset, Jn0 = vec2(n0.y, -n0.x);
  vec2 n1 = auxiliary_offset, Jn1 = vec2(n1.y, -n1.x);
  vec2 n0_plus_n1 = n0 + n1;
  float r, lambda, den;

  lambda = sign(dot(Jn0, n1));
  den = 1.0 + dot(n0, n1);
  r = (den != 0.0) ? 1.0 / den : 0.0;

  /* enforce miter_limit */
  if (miter_limit >= 0.0)
    {
      float d, den_m;
      d = dot(n0_plus_n1, n0_plus_n1);
      den_m = miter_limit * den;
      if (d >= den_m * den_m)
        {
          if (offset_type == fastuidraw_stroke_offset_miter_bevel_join)
            {
              r = 0.5;
            }
          else //if (offset_type == fastuidraw_stroke_offset_miter_join)
            {
              r = miter_limit / sqrt(d);
            }
        }
    }
  r = max(r, 0.5) * lambda;
  offset = r * (n0_plus_n1);
}

void
fastuidraw_stroke_compute_offset_rounded_join(in uint point_packed_data,
                                              in int offset_type,
                                              in vec2 position,
                                              in vec2 pre_offset,
                                              in vec2 auxiliary_offset,
                                              in float miter_limit,
                                              out vec2 offset)
{
  vec2 cs;
  cs = fastuidraw_unpack_unit_vector(auxiliary_offset.y,
                                     uint(fastuidraw_stroke_sin_sign_mask) & point_packed_data);
  offset = cs;
}

void
fastuidraw_stroke_compute_offset_square_cap(in uint point_packed_data,
                                            in int offset_type,
                                            in vec2 position,
                                            in vec2 pre_offset,
                                            in vec2 auxiliary_offset,
                                            in float miter_limit,
                                            out vec2 offset)
{
  offset = pre_offset + auxiliary_offset;
}

void
fastuidraw_stroke_compute_offset_rounded_cap(in uint point_packed_data,
                                             in int offset_type,
                                             in vec2 position,
                                             in vec2 pre_offset,
                                             in vec2 auxiliary_offset,
                                             in float miter_limit,
                                             out vec2 offset)
{
  vec2 n = pre_offset, v = vec2(n.y, -n.x);
  offset = auxiliary_offset.x * v + auxiliary_offset.y * pre_offset;
}

void
fastuidraw_stroke_compute_offset(in uint point_packed_data,
                                 in int offset_type,
                                 in vec2 position,
                                 in vec2 pre_offset,
                                 in vec2 auxiliary_offset,
                                 in float miter_limit,
                                 out vec2 offset)
{
  if (offset_type == fastuidraw_stroke_offset_miter_clip_join)
    {
      fastuidraw_stroke_compute_offset_miter_clip(point_packed_data, offset_type,
                                                  position, pre_offset, auxiliary_offset,
                                                  miter_limit, offset);
    }
  else if (offset_type == fastuidraw_stroke_offset_miter_join
          || offset_type == fastuidraw_stroke_offset_miter_bevel_join)
    {
      fastuidraw_stroke_compute_offset_miter(point_packed_data, offset_type,
                                             position, pre_offset, auxiliary_offset,
                                             miter_limit, offset);
    }
  else if (offset_type == fastuidraw_stroke_offset_rounded_join)
    {
      fastuidraw_stroke_compute_offset_rounded_join(point_packed_data, offset_type,
                                                    position, pre_offset, auxiliary_offset,
                                                    miter_limit, offset);
    }
  else if (offset_type == fastuidraw_stroke_offset_square_cap)
    {
      fastuidraw_stroke_compute_offset_square_cap(point_packed_data, offset_type,
                                                  position, pre_offset, auxiliary_offset,
                                                  miter_limit, offset);
    }
  else if (offset_type == fastuidraw_stroke_offset_rounded_cap)
    {
      fastuidraw_stroke_compute_offset_rounded_cap(point_packed_data, offset_type,
                                                   position, pre_offset, auxiliary_offset,
                                                   miter_limit, offset);
    }
  else
    {
      fastuidraw_stroke_compute_offset_default(point_packed_data, offset_type,
                                               position, pre_offset, auxiliary_offset,
                                               miter_limit, offset);
    }
}

void
fastuidraw_stroke_compute_offset_pixels_default(in uint point_packed_data,
                                                in int offset_type,
                                                in vec2 position,
                                                in vec2 pre_offset,
                                                in vec2 auxiliary_offset,
                                                in float miter_limit,
                                                out vec2 offset,
                                                inout float stroke_radius)
{
  vec3 clip_direction, clip_p;
  vec2 n;
  if ((point_packed_data & uint(fastuidraw_stroke_end_sub_edge_mask)) != 0u)
    {
      clip_p = fastuidraw_item_matrix * vec3(position + auxiliary_offset, 1.0);
    }
  else
    {
      clip_p = fastuidraw_item_matrix * vec3(position, 1.0);
    }
  n = fastuidraw_align_normal_to_screen(clip_p, pre_offset);
  clip_direction = fastuidraw_item_matrix * vec3(n, 0.0);
  stroke_radius = fastuidraw_local_distance_from_pixel_distance(stroke_radius, clip_p, clip_direction);
  offset = n;
}

void
fastuidraw_stroke_compute_offset_pixels_miter_clip(in uint point_packed_data,
                                                   in int offset_type,
                                                   in vec2 position,
                                                   in vec2 pre_offset,
                                                   in vec2 auxiliary_offset,
                                                   in float miter_limit,
                                                   out vec2 offset,
                                                   inout float stroke_radius)
{
  vec2 n0 = pre_offset, v0 = vec2(n0.y, -n0.x);
  vec2 n1 = auxiliary_offset, v1 = vec2(n1.y, -n1.x);
  vec2 p0, p1, delta_d, d0, d1;
  vec3 clip_p, clip_direction;
  float det, r, r0, r1, lambda;

  lambda = -sign(dot(v1, n0));

  if ((uint(fastuidraw_stroke_lambda_negaged_mask) & point_packed_data) != 0u)
    {
      lambda = -lambda;
    }

  clip_p = fastuidraw_item_matrix * vec3(position, 1.0);

  n0 = lambda * fastuidraw_align_normal_to_screen(clip_p, n0);
  n1 = lambda * fastuidraw_align_normal_to_screen(clip_p, n1);

  /* let p0 be p moved by n0 the named number of pixels. */
  clip_direction = fastuidraw_item_matrix * vec3(n0, 0.0);
  r0 = fastuidraw_local_distance_from_pixel_distance(stroke_radius, clip_p, clip_direction);
  d0 = r0 * n0;

  /* let p1 be p moved by n1 the named number of pixels. */
  clip_direction = fastuidraw_item_matrix * vec3(n1, 0.0);
  r1 = fastuidraw_local_distance_from_pixel_distance(stroke_radius, clip_p, clip_direction);
  d1 = r1 * n1;

  /* now compute where the lines L0 and L1 intersect
   * where L0 = { p0 + s * v0 | s > 0}
   * and L1 = { p1 - s * v1 | s > 0}
   */
  delta_d = d1 - d0;
  det = v0.x * v1.y - v0.y * v1.x;

  if (det != 0.0)
    {
      r = (v1.y * delta_d.x - v1.x * delta_d.y) / det;
    }
  else
    {
      r = 0.0;
    }

      /* miter limit; we use the distance induces
       * from d0 since the miter-point is paired
       * with d0.
      */
  if (miter_limit >= 0.0)
    {
      float m, mm, ld0;

      /* miter distance, which is measure from the
       * point of the path (given by position)
       */
      m = miter_limit * length(d0);

      /* the value r is how much to offset in the
       * direction v0; We have a right triangle
       * (corner at position), height is along n0,
       * is with height r0 and the length is given
       * by r.
       */
      mm = m * abs(r) / length(d0 + r * v0);
      r = clamp(r, -mm, mm);
    }

  offset = d0 + r * v0;
  stroke_radius = 1.0;
}

void
fastuidraw_stroke_compute_offset_pixels_miter(in uint point_packed_data,
                                              in int offset_type,
                                              in vec2 position,
                                              in vec2 pre_offset,
                                              in vec2 auxiliary_offset,
                                              in float miter_limit,
                                              out vec2 offset,
                                              inout float stroke_radius)
{
  vec2 n0 = pre_offset, v0 = vec2(n0.y, -n0.x);
  vec2 n1 = auxiliary_offset, v1 = vec2(n1.y, -n1.x);
  vec2 p0, p1, delta_d, d0, d1;
  vec3 clip_p, clip_direction;
  float det, r, r0, r1, lambda;

  lambda = -sign(dot(v1, n0));
  clip_p = fastuidraw_item_matrix * vec3(position, 1.0);

  n0 = normalize(lambda * fastuidraw_align_normal_to_screen(clip_p, n0));
  n1 = normalize(lambda * fastuidraw_align_normal_to_screen(clip_p, n1));

  /* let p0 be p moved by n0 the named number of pixels. */
  clip_direction = fastuidraw_item_matrix * vec3(n0, 0.0);
  r0 = fastuidraw_local_distance_from_pixel_distance(stroke_radius, clip_p, clip_direction);
  d0 = r0 * n0;

  /* let p1 be p moved by n1 the named number of pixels. */
  clip_direction = fastuidraw_item_matrix * vec3(n1, 0.0);
  r1 = fastuidraw_local_distance_from_pixel_distance(stroke_radius, clip_p, clip_direction);
  d1 = r1 * n1;

  /* now compute where the lines L0 and L1 intersect
   * where L0 = { p0 + s * v0 | s > 0}
   * and L1 = { p1 - s * v1 | s > 0}
   */
  delta_d = d1 - d0;
  det = v0.x * v1.y - v0.y * v1.x;

  if (det != 0.0)
    {
      float inverse_det;

      inverse_det = 1.0 / det;
      r = (v1.y * delta_d.x - v1.x * delta_d.y) * inverse_det;
      offset = d0 + r * v0;

      /* inforce miter-limit. */
      if (miter_limit >= 0.0)
        {
          float m, mm, l;

          m = miter_limit * max(r0, r1);
          l = length(offset);
          if (l > m)
            {
              if (offset_type == fastuidraw_stroke_offset_miter_bevel_join)
                {
                  offset = 0.5 * (d0 + d1);
                }
              else //if (offset_type == fastuidraw_stroke_offset_miter_join)
                {
                  float k;
                  k = 0.5 * length(d0 + d1);
                  offset *= max(m, k) / l;
                }
            }
        }
    }
  else
    {
      offset = 0.5 * (d0 + d1);
    }

  stroke_radius = 1.0;
}

void
fastuidraw_stroke_compute_offset_pixels_rounded_join(in uint point_packed_data,
                                                     in int offset_type,
                                                     in vec2 position,
                                                     in vec2 pre_offset,
                                                     in vec2 auxiliary_offset,
                                                     in float miter_limit,
                                                     out vec2 offset,
                                                     inout float stroke_radius)
{
  vec2 n0, n1;
  float interpolate;
  vec3 clip_p, clip_direction;
  vec2 t0, t1, screen_t0, screen_t1, screen_t, screen_n;
  mat2 Q, adjQ;
  float d;

  n0 = fastuidraw_unpack_unit_vector(pre_offset.x,
                                     uint(fastuidraw_stroke_normal0_y_sign_mask) & point_packed_data);
  n1 = fastuidraw_unpack_unit_vector(pre_offset.y,
                                     uint(fastuidraw_stroke_normal1_y_sign_mask) & point_packed_data);
  interpolate = auxiliary_offset.x;

  clip_p = fastuidraw_item_matrix * vec3(position, 1.0);
  fastuidraw_align_compute_Q_adjoint_Q(clip_p, Q, adjQ);

  t0 = vec2(-n0.y, n0.x);
  t1 = vec2(-n1.y, n1.x);
  screen_t0 = normalize(fastuidraw_viewport_pixels * (Q * t0));
  screen_t1 = normalize(fastuidraw_viewport_pixels * (Q * t1));
  d = dot(screen_t0, screen_t1);

  if (d > 0.0)
    {
      screen_t = mix(screen_t0, screen_t1, interpolate);
    }
  else
    {
      /* "Joy", screen_t0 and screen_t1 point in different
       * directions. In this painful case we will interpolate
       * along a circle
       */
      screen_t = fastuidraw_circular_interpolate(screen_t0, screen_t1, d, interpolate);
    }
  screen_n = vec2(screen_t.y, -screen_t.x);

  offset = adjQ * (fastuidraw_viewport_recip_pixels * screen_n);
  clip_direction = fastuidraw_item_matrix * vec3(offset, 0.0);
  stroke_radius = fastuidraw_local_distance_from_pixel_distance(stroke_radius, clip_p, clip_direction);
}

void
fastuidraw_stroke_compute_offset_pixels_square_cap(in uint point_packed_data,
                                                   in int offset_type,
                                                   in vec2 position,
                                                   in vec2 pre_offset,
                                                   in vec2 auxiliary_offset,
                                                   in float miter_limit,
                                                   out vec2 offset,
                                                   inout float stroke_radius)
{
  vec3 clip_direction0, clip_direction1, clip_p;
  float s0, s1;
  vec2 n;

  /* move along tangent named number of pixels */
  clip_p = fastuidraw_item_matrix * vec3(position, 1.0);
  clip_direction0 = fastuidraw_item_matrix * vec3(auxiliary_offset, 0.0);
  s0 = fastuidraw_local_distance_from_pixel_distance(stroke_radius, clip_p, clip_direction0);

  /* move along normal named number of pixels */
  clip_p = fastuidraw_item_matrix * vec3(position + s0 * auxiliary_offset, 1.0);
  n = fastuidraw_align_normal_to_screen(clip_p, pre_offset);
  clip_direction1 = fastuidraw_item_matrix * vec3(n, 0.0);
  s1 = fastuidraw_local_distance_from_pixel_distance(stroke_radius, clip_p, clip_direction1);

  stroke_radius = 1.0;
  offset = s0 * auxiliary_offset + s1 * n;
}

void
fastuidraw_stroke_compute_offset_pixels_rounded_cap(in uint point_packed_data,
                                                    in int offset_type,
                                                    in vec2 position,
                                                    in vec2 pre_offset,
                                                    in vec2 auxiliary_offset,
                                                    in float miter_limit,
                                                    out vec2 offset,
                                                    inout float stroke_radius)
{
  vec2 n = pre_offset, v = vec2(n.y, -n.x);
  vec3 clip_n, clip_v, clip_p;
  vec2 tn = auxiliary_offset;

  clip_p = fastuidraw_item_matrix * vec3(position, 1.0);
  n = fastuidraw_align_normal_to_screen(clip_p, n);

  clip_v = fastuidraw_item_matrix * vec3(v, 0.0);
  tn.x = fastuidraw_local_distance_from_pixel_distance(tn.x * stroke_radius, clip_p, clip_v);

  clip_n = fastuidraw_item_matrix * vec3(n, 0.0);
  tn.y = fastuidraw_local_distance_from_pixel_distance(tn.y * stroke_radius, clip_p, clip_n);

  stroke_radius = 1.0;
  offset = tn.x * v + tn.y * n;
}

void
fastuidraw_stroke_compute_offset_pixels(in uint point_packed_data,
                                        in int offset_type,
                                        in vec2 position,
                                        in vec2 pre_offset,
                                        in vec2 auxiliary_offset,
                                        in float miter_limit,
                                        out vec2 offset,
                                        inout float stroke_radius)
{
  if (offset_type == fastuidraw_stroke_offset_miter_clip_join)
    {
      fastuidraw_stroke_compute_offset_pixels_miter_clip(point_packed_data, offset_type,
                                                         position, pre_offset, auxiliary_offset,
                                                         miter_limit, offset, stroke_radius);
    }
  else if (offset_type == fastuidraw_stroke_offset_miter_join
          || offset_type == fastuidraw_stroke_offset_miter_bevel_join)
    {
      fastuidraw_stroke_compute_offset_pixels_miter(point_packed_data, offset_type,
                                                    position, pre_offset, auxiliary_offset,
                                                    miter_limit, offset, stroke_radius);
    }
  else if (offset_type == fastuidraw_stroke_offset_rounded_join)
    {
      fastuidraw_stroke_compute_offset_pixels_rounded_join(point_packed_data, offset_type,
                                                           position, pre_offset, auxiliary_offset,
                                                           miter_limit, offset, stroke_radius);
    }
  else if (offset_type == fastuidraw_stroke_offset_square_cap)
    {
      fastuidraw_stroke_compute_offset_pixels_square_cap(point_packed_data, offset_type,
                                                         position, pre_offset, auxiliary_offset,
                                                         miter_limit, offset, stroke_radius);
    }
  else if (offset_type == fastuidraw_stroke_offset_rounded_cap)
    {
      fastuidraw_stroke_compute_offset_pixels_rounded_cap(point_packed_data, offset_type,
                                                          position, pre_offset, auxiliary_offset,
                                                          miter_limit, offset, stroke_radius);
    }
  else
    {
      fastuidraw_stroke_compute_offset_pixels_default(point_packed_data, offset_type,
                                                      position, pre_offset, auxiliary_offset,
                                                      miter_limit, offset, stroke_radius);
    }
}


struct fastuidraw_dashed_struct_base
{
  float d; //distance at current vertex
  float s; //negative if current vertex in skip dash interval, positive if in draw dash interval
  int interval_id; //interval id of dash interface where current vertex located
  float interval_begin, interval_end; //begin and ending of interval
  uint dash_pattern_at;
};

struct fastuidraw_dashed_struct_edge_extend
{
  bool is_end_of_edge;  //true if and only if current vertex is at the end of the edge
  float edge_length; //length of edge
  bool has_caps;

  float d2; //distance of other vertex
  float s2; //negative if other vertex in skip dash interval, positive if in draw dash interval
  int interval_id2; //interval id of dash interface where other vertex located
  float interval_begin2, interval_end2; //begin and ending of interval

  uint stroking_bits; //stroking bit-masks that frag shader will use
  float stroking_distance; //stroking distance value to pass to frag-shader
  float edge_distance_start, edge_distance_end; //stroking begin/end distance to pass to frag shader
  bool extend_edge; // true if edge should be extended
  bool collapse;
};

#define fastuidraw_dashed_stroking_edge_start 0
#define fastuidraw_dashed_stroking_edge_end   1

/*
 * Returns false if the entire is within a skip interval.
 */
void
fastuidraw_dashed_helper_vert_base(in float d,
                                   in uint shader_data_offset,
                                   in fastuidraw_dashed_stroking_params_header stroke_params,
                                   out fastuidraw_dashed_struct_base out_data)
{
  out_data.d = d;
  out_data.dash_pattern_at = shader_data_offset + uint(fastuidraw_stroke_dashed_stroking_params_header_num_blocks);
  out_data.s = fastuidraw_compute_interval(out_data.dash_pattern_at,
                                           stroke_params.total_length,
                                           stroke_params.first_interval_start,
                                           out_data.d,
                                           stroke_params.number_intervals,
                                           out_data.interval_id,
                                           out_data.interval_begin, out_data.interval_end);
}

void
fastuidraw_dashed_helper_vert_extend_edge(in uint shader_data_offset,
                                          in fastuidraw_dashed_stroking_params_header stroke_params,
                                          in float stroke_radius,
                                          in bool is_edge_end,
                                          in float edge_length,
                                          in bool has_caps,
                                          in fastuidraw_dashed_struct_base base,
                                          out fastuidraw_dashed_struct_edge_extend extend_edge)
{
  extend_edge.is_end_of_edge = is_edge_end;
  extend_edge.edge_length = edge_length;
  extend_edge.has_caps = has_caps;

  extend_edge.d2 = (extend_edge.is_end_of_edge) ?
    base.d - edge_length:
    base.d + edge_length;

  extend_edge.s2 = fastuidraw_compute_interval(base.dash_pattern_at,
                                               stroke_params.total_length,
                                               stroke_params.first_interval_start,
                                               extend_edge.d2,
                                               stroke_params.number_intervals,
                                               extend_edge.interval_id2,
                                               extend_edge.interval_begin2, extend_edge.interval_end2);

  if (extend_edge.interval_id2 == base.interval_id && base.interval_id != -1)
    {
      extend_edge.stroking_bits = uint(fastuidraw_stroke_gauranteed_to_be_covered_mask);
      extend_edge.stroking_distance = 0.0;
      extend_edge.collapse = (extend_edge.s2 < 0.0);
      extend_edge.extend_edge = false;
    }
  else
    {
      extend_edge.stroking_bits = 0u;
      extend_edge.collapse = false;

      if (!extend_edge.is_end_of_edge)
        {
          float clamp_interval_end;

          extend_edge.edge_distance_start = (base.s < 0.0) ?
            base.interval_end :
            base.d;

          extend_edge.edge_distance_end = (extend_edge.s2 < 0.0) ?
            extend_edge.interval_begin2 :
            extend_edge.d2;

          if (base.s < 0.0 && extend_edge.has_caps)
            {
              extend_edge.stroking_distance = base.d - stroke_radius;
              extend_edge.extend_edge = true;
            }
          else
            {
              extend_edge.stroking_distance = base.d;
              extend_edge.extend_edge = false;
            }
        }
      else
        {
          float clamp_interval_begin;

          extend_edge.edge_distance_start = (extend_edge.s2 < 0.0) ?
            extend_edge.interval_end2 :
            extend_edge.d2;

          extend_edge.edge_distance_end = (base.s < 0.0) ?
            base.interval_begin :
            base.d;

          if (base.s < 0.0 && extend_edge.has_caps)
            {
              extend_edge.stroking_distance = base.d + stroke_radius;
              extend_edge.extend_edge = true;
            }
          else
            {
              extend_edge.stroking_distance = base.d;
              extend_edge.extend_edge = false;
            }
        }
    }
}
