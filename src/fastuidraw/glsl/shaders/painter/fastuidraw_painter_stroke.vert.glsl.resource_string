vec4
fastuidraw_gl_vert_main(in uint sub_shader,
                        in uvec4 uprimary_attrib,
                        in uvec4 usecondary_attrib,
                        in uvec4 uint_attrib,
                        in uint shader_data_offset,
                        out int z_add)
{
  vec4 primary_attrib, secondary_attrib;

  primary_attrib = uintBitsToFloat(uprimary_attrib);
  secondary_attrib = uintBitsToFloat(usecondary_attrib);

  uint render_pass;
  bool stroke_width_pixels;
  int stroking_pass;
  const float anti_alias_thickness = 1.5;

  #ifndef FASTUIDRAW_STROKE_ONLY_SUPPORT_NON_AA
    {
      render_pass = FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_sub_shader_render_pass_bit0,
                                            fastuidraw_stroke_sub_shader_render_pass_num_bits,
                                            sub_shader);
    }
  #else
    {
      render_pass = uint(fastuidraw_stroke_non_aa);
    }
  #endif

  stroking_pass = int(render_pass);

  vec2 p;
  vec2 position, pre_offset, auxiliary_offset, offset;
  float distance_from_edge_start, distance_from_contour_start;
  float total_edge_length, total_open_contour_length, total_closed_contour_length;
  float miter_distance, stroke_radius;
  int on_boundary, offset_type;
  uint point_packed_data;

  #ifdef FASTUIDRAW_STROKE_DASHED
  fastuidraw_dashed_stroking_params_header stroke_params;
  fastuidraw_read_dashed_stroking_params_header(shader_data_offset, stroke_params);
  #else
  fastuidraw_stroking_params stroke_params;
  fastuidraw_read_stroking_params(shader_data_offset, stroke_params);
  #endif

  position = primary_attrib.xy;
  pre_offset = primary_attrib.zw;
  auxiliary_offset = secondary_attrib.zw;
  distance_from_edge_start = secondary_attrib.x;
  distance_from_contour_start = secondary_attrib.y;
  total_edge_length = uintBitsToFloat(uint_attrib.y);
  total_open_contour_length = uintBitsToFloat(uint_attrib.z);
  total_closed_contour_length = uintBitsToFloat(uint_attrib.w);
  point_packed_data = uint_attrib.x;
  offset_type = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_offset_type_bit0,
                                            fastuidraw_stroke_offset_type_num_bits,
                                            point_packed_data));
  on_boundary = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_boundary_bit,
                                            1,
                                            point_packed_data));

  stroke_width_pixels = (stroke_params.radius < 0.0);
  stroke_radius = abs(stroke_params.radius);

  #ifdef FASTUIDRAW_STROKE_DASHED
    {
      fastuidraw_dashed_struct_base base;

      fastuidraw_dashed_helper_vert_base(distance_from_contour_start + stroke_params.dash_offset,
                                         shader_data_offset, stroke_params, base);

      if (offset_type == fastuidraw_stroke_offset_sub_edge)
        {
          if ((point_packed_data & uint(fastuidraw_stroke_bevel_edge_mask)) != 0u)
            {
              /* bevel points have either the computation for dashing
                 skipped OR are collapsed to a point to avoid drawing.
               */
              fastuidraw_stroking_dash_bits = uint(fastuidraw_stroke_gauranteed_to_be_covered_mask);
              fastuidraw_stroking_distance = 0.0;
              if (base.s < 0.0)
                {
                  on_boundary = 0;
                }
            }
          else
            {
              fastuidraw_dashed_struct_edge_extend extend_edge;
              float delta_mag;
              int dash_style;

              dash_style = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_sub_shader_dash_style_bit0,
                                                       fastuidraw_stroke_sub_shader_dash_style_num_bits,
                                                       sub_shader));

              delta_mag = length(auxiliary_offset);
              fastuidraw_dashed_helper_vert_extend_edge(shader_data_offset,
                                                        stroke_params, stroke_radius,
                                                        (point_packed_data & uint(fastuidraw_stroke_end_sub_edge_mask)) != 0u,
                                                        delta_mag,
                                                        dash_style != fastuidraw_stroke_dashed_flat_caps,
                                                        base, extend_edge);

              fastuidraw_stroking_distance_sub_edge_start = extend_edge.edge_distance_start;
              fastuidraw_stroking_distance_sub_edge_end = extend_edge.edge_distance_end;
              fastuidraw_stroking_dash_bits = extend_edge.stroking_bits;
              fastuidraw_stroking_distance = extend_edge.stroking_distance;

              if (extend_edge.collapse)
                {
                  on_boundary = 0;
                }

              if (extend_edge.extend_edge)
                {
                  position -= auxiliary_offset * (stroke_radius / delta_mag);
                }
            }
        }
      else if (offset_type == fastuidraw_stroke_offset_adjustable_cap)
        {
          if (base.s > 0.0)
            {
              /* the contour start (or end) is inside the dash pattern,
                 so we need to draw full cap; set starting distance
                 as 0 and the boundary distance as r.
               */
              if ((point_packed_data & uint(fastuidraw_stroke_adjustable_cap_ending_mask)) != 0u)
                {
                  position += stroke_radius * auxiliary_offset;
                  fastuidraw_stroking_distance = -stroke_radius;
                }
              else
                {
                  fastuidraw_stroking_distance = 0.0;
                }
            }
          else
            {
              /* complete collapse because the neightboring
                 sub-edge will extend itself to draw the cap.
               */
              on_boundary = 0;
              fastuidraw_stroking_distance = 0.0;
            }

          auxiliary_offset = vec2(0.0, 0.0);
          fastuidraw_stroking_dash_bits = uint(fastuidraw_stroke_skip_dash_interval_lookup_mask);

          /* change offset_type to shared_with_edge since
             we have modified the data so that its geometry
             can be computed just as that.
           */
          offset_type = fastuidraw_stroke_offset_shared_with_edge;
        }
      else if ((point_packed_data & uint(fastuidraw_stroke_join_mask)) != 0u)
        {
          /* The points of a join all have the same distance values, thus
           * if it is ouside the dash-pattern, then collapse the join to
           * a point to prevent any rasterization.
           */
          fastuidraw_stroking_dash_bits = uint(fastuidraw_stroke_gauranteed_to_be_covered_mask);
          fastuidraw_stroking_distance = 0.0;
          if (base.s < 0.0)
            {
              on_boundary = 0;
            }
        }
    }
  #endif

  #if !defined(FASTUIDRAW_STROKE_DASHED) && !defined(FASTUIDRAW_STROKE_COVER_THEN_DRAW)
    {
      /* Reduce the stroking width by 1-pixel when doing 2-pass non-dashed stroking
         without auxiliary buffer
       */
      if (stroking_pass == fastuidraw_stroke_aa_pass1 && stroke_width_pixels)
        {
          stroke_radius = max(stroke_radius - anti_alias_thickness, 0.0);
        }
    }
  #endif

  if (on_boundary != 0)
    {
      if (stroke_width_pixels)
        {
          fastuidraw_stroke_compute_offset_pixels(point_packed_data, offset_type, position,
                                                  pre_offset, auxiliary_offset,
                                                  stroke_params.miter_limit,
                                                  offset, stroke_radius);
        }
      else
        {
          fastuidraw_stroke_compute_offset(point_packed_data, offset_type, position,
                                           pre_offset, auxiliary_offset,
                                           stroke_params.miter_limit,
                                           offset);
        }

     p = position + stroke_radius * offset;

     #if !defined(FASTUIDRAW_STROKE_DASHED) && !defined(FASTUIDRAW_STROKE_COVER_THEN_DRAW)
        {
          /* Reduce the stroking width by 1-pixel when doing 2-pass non-dashed stroking
             without auxiliary buffer
          */
          if (stroking_pass == fastuidraw_stroke_aa_pass1 && !stroke_width_pixels)
            {
              vec3 clip_p, clip_direction;
              float r;

              clip_p = fastuidraw_item_matrix * vec3(p, 1.0);
              clip_direction = fastuidraw_item_matrix * vec3(offset, 0);
              r = fastuidraw_local_distance_from_pixel_distance(anti_alias_thickness, clip_p, clip_direction);
              p -= min(stroke_radius, r) * offset;
            }
        }
      #endif

    }
  else
    {
      p = position;
    }

  fastuidraw_stroking_on_boundary = float(on_boundary);

  #if defined(FASTUIDRAW_STROKE_ONLY_SUPPORT_NON_AA)
    {
      z_add = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_depth_bit0,
                                          fastuidraw_stroke_depth_num_bits,
                                          point_packed_data));
    }
  #elif defined(FASTUIDRAW_STROKE_COVER_THEN_DRAW)
    {
      if (stroking_pass != fastuidraw_stroke_non_aa)
        {
          z_add = 0;
        }
      else
        {
          z_add = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_depth_bit0,
                                              fastuidraw_stroke_depth_num_bits,
                                              point_packed_data));
        }
    }
  #else
    {
      z_add = int(FASTUIDRAW_EXTRACT_BITS(fastuidraw_stroke_depth_bit0,
                                          fastuidraw_stroke_depth_num_bits,
                                          point_packed_data));
    }
  #endif

  return vec4(p, p);
}
